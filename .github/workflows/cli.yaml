name: Build Maestro CLI
on:
  push:
    tags:
      - v*
jobs:
  push:
    name: Publish docker images
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Format version
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo VERSION=$VERSION
          echo "::set-env name=VERSION::$VERSION"

      - name: Log into Docker hub
        run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
      
      - name: Push image Docker hub
        run: |
          IMAGE_ID=jexiacom/maestro

          echo IMAGE_ID=$IMAGE_ID:$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker tag image $IMAGE_ID:latest

          docker push $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:latest
      
      - name: Log into Github registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image Github registry
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/server

          echo IMAGE_ID=$IMAGE_ID:$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker tag image $IMAGE_ID:latest

          docker push $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:latest

  publish:
    name: Publish for ${{ matrix.os }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux-amd64
            artifact_name: maestro-amd64
            goos: linux
            arch: amd64
            asset_name: linux-amd64
          - os: linux-i386
            artifact_name: maestro-i386
            goos: linux
            arch: "386"
            asset_name: linux-386
          - os: windows-amd64
            artifact_name: maestro-amd64.exe
            goos: windows
            arch: amd64
            asset_name: windows-amd64
          - os: windows-i386
            artifact_name: maestro-i386.exe
            goos: windows
            arch: "386"
            asset_name: windows-amd64
          - os: darwin-amd64
            artifact_name: maestro
            goos: darwin
            arch: amd64
            asset_name: darwin-amd64

    steps:
    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - uses: actions/cache@v1
      with: 
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get dependencies
      run: go get -v -t -d ./...

    - name: Format version
      run: |
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo VERSION=$VERSION
        echo "::set-env name=VERSION::$VERSION"

    - name: Build
      run: CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.arch }} go build -o ${{ matrix.artifact_name }} ./cmd/maestro

    - name: Upload binaries to release
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ${{ matrix.artifact_name }}
        asset_name: maestro-${{ env.VERSION }}-${{ matrix.artifact_name }}
        tag: ${{ github.ref }}          
